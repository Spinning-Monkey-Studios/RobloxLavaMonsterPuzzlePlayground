local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Life = require(game.ReplicatedStorage:WaitForChild("Life"))

print("LavaDamage: Script starting...")

-- Get lava parts
local LavaSurface = workspace.Lava:FindFirstChild("LavaSurface")
local LavaFloor = workspace.Lava:FindFirstChild("LavaFloor")

print("LavaDamage: Looking for lava parts...")
if LavaSurface then
	print("LavaDamage: Found LavaSurface:", LavaSurface.Name, LavaSurface.ClassName)
else
	warn("LavaDamage: LavaSurface NOT FOUND!")
end

if LavaFloor then
	print("LavaDamage: Found LavaFloor:", LavaFloor.Name, LavaFloor.ClassName)
else
	warn("LavaDamage: LavaFloor NOT FOUND!")
end

-- Damage settings
local DAMAGE_PER_TICK = 5
local DAMAGE_INTERVAL = 0.1
local lastDamageTime = {}

print("LavaDamage: Damage settings - Per tick:", DAMAGE_PER_TICK, "Interval:", DAMAGE_INTERVAL)

-- Track players in lava
local playersInLava = {}
local damageConnections = {}
local playerDamageGUIs = {}

-- Clean up tracking for a player
local function cleanupPlayer(player)
	print("LavaDamage: Cleaning up player", player.Name)
	playersInLava[player] = nil
	lastDamageTime[player] = nil
	if damageConnections[player] then
		damageConnections[player]:Disconnect()
		damageConnections[player] = nil
	end
	if playerDamageGUIs[player] then
		playerDamageGUIs[player]:Destroy()
		playerDamageGUIs[player] = nil
	end
end

-- Create damage GUI for a player
local function createDamageGUI(player)
	print("LavaDamage: Creating damage GUI for", player.Name)

	if playerDamageGUIs[player] then
		playerDamageGUIs[player]:Destroy()
	end

	local playerGui = player:FindFirstChild("PlayerGui")
	if not playerGui then
		warn("LavaDamage: No PlayerGui found for", player.Name)
		return
	end

	-- Create ScreenGui
	local screenGui = Instance.new("ScreenGui")
	screenGui.Name = "DamageGUI"
	screenGui.ResetOnSpawn = false
	screenGui.Parent = playerGui

	-- Main frame
	local frame = Instance.new("Frame")
	frame.Name = "DamageFrame"
	frame.Size = UDim2.new(0, 300, 0, 40)
	frame.Position = UDim2.new(0.5, -150, 0, 50) -- Above heal bar
	frame.BackgroundColor3 = Color3.new(0.1, 0, 0) -- Dark red background
	frame.BackgroundTransparency = 0.3
	frame.BorderSizePixel = 2
	frame.BorderColor3 = Color3.new(1, 0.3, 0.3) -- Red border
	frame.Parent = screenGui

	-- Corner rounding
	local corner = Instance.new("UICorner")
	corner.CornerRadius = UDim.new(0, 8)
	corner.Parent = frame

	-- Health bar background
	local barBG = Instance.new("Frame")
	barBG.Name = "BarBackground"
	barBG.Size = UDim2.new(1, -10, 0.6, 0)
	barBG.Position = UDim2.new(0, 5, 0.2, 0)
	barBG.BackgroundColor3 = Color3.new(0.1, 0.1, 0.1)
	barBG.BorderSizePixel = 0
	barBG.Parent = frame

	local barCorner = Instance.new("UICorner")
	barCorner.CornerRadius = UDim.new(0, 4)
	barCorner.Parent = barBG

	-- Health bar fill (starts full, decreases)
	local barFill = Instance.new("Frame")
	barFill.Name = "BarFill"
	barFill.Size = UDim2.new(1, 0, 1, 0) -- Start at full width
	barFill.Position = UDim2.new(0, 0, 0, 0)
	barFill.BackgroundColor3 = Color3.new(0.9, 0.2, 0.2) -- Red color
	barFill.BorderSizePixel = 0
	barFill.Parent = barBG

	local fillCorner = Instance.new("UICorner")
	fillCorner.CornerRadius = UDim.new(0, 4)
	fillCorner.Parent = barFill

	-- Label
	local label = Instance.new("TextLabel")
	label.Name = "DamageLabel"
	label.Size = UDim2.new(1, 0, 1, 0)
	label.Position = UDim2.new(0, 0, 0, 0)
	label.BackgroundTransparency = 1
	label.Text = "Taking Damage!"
	label.TextColor3 = Color3.new(1, 0.7, 0.7) -- Light red text
	label.TextScaled = true
	label.Font = Enum.Font.GothamBold
	label.Parent = frame

	playerDamageGUIs[player] = screenGui
	print("LavaDamage: Damage GUI created successfully for", player.Name)
	return screenGui
end

-- Update damage GUI
local function updateDamageGUI(player, currentHealth, maxHealth)
	local gui = playerDamageGUIs[player]
	if not gui then return end

	local barFill = gui.DamageFrame.BarBackground.BarFill
	local label = gui.DamageFrame.DamageLabel

	local healthPercent = currentHealth / maxHealth
	barFill.Size = UDim2.new(healthPercent, 0, 1, 0)

	-- Change color as health gets lower
	if healthPercent > 0.6 then
		barFill.BackgroundColor3 = Color3.new(0.9, 0.8, 0.2) -- Yellow-ish when high
	elseif healthPercent > 0.3 then
		barFill.BackgroundColor3 = Color3.new(0.9, 0.4, 0.2) -- Orange when medium
	else
		barFill.BackgroundColor3 = Color3.new(0.9, 0.2, 0.2) -- Red when low
	end

	label.Text = string.format("Health: %d/%d", math.floor(currentHealth), maxHealth)
end

-- Remove damage GUI
local function removeDamageGUI(player)
	if playerDamageGUIs[player] then
		print("LavaDamage: Removing damage GUI for", player.Name)
		playerDamageGUIs[player]:Destroy()
		playerDamageGUIs[player] = nil
	end
end

-- Start damaging a player
local function startDamaging(player)
	print("LavaDamage: startDamaging called for", player.Name)

	-- Don't start if already damaging
	if damageConnections[player] then
		print("LavaDamage: Player", player.Name, "already being damaged")
		return
	end

	local character = player.Character
	if not character then
		print("LavaDamage: No character found for", player.Name)
		return
	end

	local humanoid = character:FindFirstChild("Humanoid")
	if not humanoid then
		print("LavaDamage: No humanoid found for", player.Name)
		return
	end

	print("LavaDamage: Starting damage for", player.Name, "Current LifePoints:", humanoid:GetAttribute("LifePoints"))

	-- Create damage GUI
	createDamageGUI(player)

	-- Initialize last damage time
	lastDamageTime[player] = tick()

	-- Create damage loop using Heartbeat
	damageConnections[player] = RunService.Heartbeat:Connect(function()
		-- Check if player is still valid
		if not player.Parent or not player.Character then
			print("LavaDamage: Player", player.Name, "no longer valid, cleaning up")
			cleanupPlayer(player)
			return
		end

		local currentHumanoid = player.Character:FindFirstChild("Humanoid")
		if not currentHumanoid or currentHumanoid.Health <= 0 then
			print("LavaDamage: Humanoid died or missing for", player.Name)
			cleanupPlayer(player)
			return
		end

		-- Get current health for GUI update
		local currentLife = currentHumanoid:GetAttribute("LifePoints") or 100
		local maxLife = currentHumanoid:GetAttribute("MaxLifePoints") or 100

		-- Ensure GUI exists if player is in lava
		if playersInLava[player] and not playerDamageGUIs[player] then
			print("LavaDamage: Player", player.Name, "in lava but no GUI - recreating")
			createDamageGUI(player)
		end

		updateDamageGUI(player, currentLife, maxLife)

		-- Only damage if still in lava and enough time has passed
		if playersInLava[player] then
			local currentTime = tick()
			if currentTime - lastDamageTime[player] >= DAMAGE_INTERVAL then
				Life.Damage(currentHumanoid, DAMAGE_PER_TICK)
				lastDamageTime[player] = currentTime

				local newLife = currentHumanoid:GetAttribute("LifePoints") or 0
				print("LavaDamage: Damaged", player.Name, "by", DAMAGE_PER_TICK, "New LifePoints:", newLife)

				-- Check if player died
				if newLife <= 0 then
					print("LavaDamage: Player", player.Name, "died from lava damage")
					cleanupPlayer(player)
					return
				end
			end
		end
	end)

	print("LavaDamage: Damage loop started for", player.Name)
end

-- Stop damaging a player
local function stopDamaging(player)
	print("LavaDamage: stopDamaging called for", player.Name)
	if damageConnections[player] then
		damageConnections[player]:Disconnect()
		damageConnections[player] = nil
		print("LavaDamage: Stopped damaging", player.Name)
	end
	removeDamageGUI(player) -- Remove GUI when damage stops
end

-- Handle player entering lava
local function playerEnteredLava(player)
	print("LavaDamage: playerEnteredLava called for", player.Name)
	playersInLava[player] = tick()
	print("LavaDamage: Player", player.Name, "marked as in lava")

	-- Start damaging immediately (no delay)
	startDamaging(player)
end

-- Handle player leaving lava
local function playerLeftLava(player)
	print("LavaDamage: playerLeftLava called for", player.Name)
	playersInLava[player] = nil
	print("LavaDamage: Player", player.Name, "no longer in lava")
	-- Remove damage GUI when leaving lava (damage persists but GUI disappears)
	removeDamageGUI(player)
	-- Note: We don't stop damaging here - damage persists until healed
end

-- Generic touch handler
local function handleTouch(hit, enterCallback, partName)
	print("LavaDamage: Touch detected on", partName, "by", hit.Name, "from", hit.Parent.Name)

	local character = hit.Parent
	local player = Players:GetPlayerFromCharacter(character)

	if player then
		local humanoid = character:FindFirstChild("Humanoid")
		if humanoid then
			print("LavaDamage: Valid player touch -", player.Name)
			enterCallback(player)
		else
			print("LavaDamage: No humanoid found in character", character.Name)
		end
	else
		print("LavaDamage: Touch from non-player:", character.Name)
	end
end

-- Generic touch ended handler
local function handleTouchEnded(hit, exitCallback, partName)
	print("LavaDamage: TouchEnded detected on", partName, "by", hit.Name, "from", hit.Parent.Name)

	local character = hit.Parent
	local player = Players:GetPlayerFromCharacter(character)

	if player then
		print("LavaDamage: Valid player touch ended -", player.Name)
		exitCallback(player)
	end
end

-- Set up lava surface events
if LavaSurface then
	print("LavaDamage: Connecting LavaSurface events...")

	LavaSurface.Touched:Connect(function(hit)
		handleTouch(hit, playerEnteredLava, "LavaSurface")
	end)

	LavaSurface.TouchEnded:Connect(function(hit)
		handleTouchEnded(hit, playerLeftLava, "LavaSurface")
	end)

	print("LavaDamage: LavaSurface events connected successfully")
else
	warn("LavaDamage: Cannot connect LavaSurface events - part not found!")
end

-- Make sure floor never generates touches
if LavaFloor then
	LavaFloor.CanTouch = false
end

-- Clean up when players leave
Players.PlayerRemoving:Connect(function(player)
	print("LavaDamage: Player", player.Name, "is leaving, cleaning up")
	cleanupPlayer(player)
end)

-- Handle character respawning
Players.PlayerAdded:Connect(function(player)
	print("LavaDamage: Player", player.Name, "added")
	player.CharacterRemoving:Connect(function()
		print("LavaDamage: Character removing for", player.Name)
		cleanupPlayer(player)
	end)
end)

-- Clean up existing players
for _, player in pairs(Players:GetPlayers()) do
	print("LavaDamage: Setting up cleanup for existing player", player.Name)
	player.CharacterRemoving:Connect(function()
		print("LavaDamage: Character removing for existing player", player.Name)
		cleanupPlayer(player)
	end)
end

-- Expose functions for other scripts to use
_G.LavaDamage = {
	stopDamaging = stopDamaging,
	isPlayerDamaged = function(player) 
		return damageConnections[player] ~= nil 
	end
}

print("LavaDamage: Script setup complete!")